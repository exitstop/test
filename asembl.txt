
prog:     формат файла elf64-x86-64


Дизассемблирование раздела .init:

0000000000400df8 <_init>:
  400df8:	48 83 ec 08          	sub    rsp,0x8
  400dfc:	48 8b 05 f5 11 20 00 	mov    rax,QWORD PTR [rip+0x2011f5]        # 601ff8 <_DYNAMIC+0x1f0>
  400e03:	48 85 c0             	test   rax,rax
  400e06:	74 05                	je     400e0d <_init+0x15>
  400e08:	e8 f3 01 00 00       	call   401000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt+0x10>
  400e0d:	48 83 c4 08          	add    rsp,0x8
  400e11:	c3                   	ret    

Дизассемблирование раздела .plt:

0000000000400e20 <printf@plt-0x10>:
  400e20:	ff 35 e2 11 20 00    	push   QWORD PTR [rip+0x2011e2]        # 602008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400e26:	ff 25 e4 11 20 00    	jmp    QWORD PTR [rip+0x2011e4]        # 602010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400e2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400e30 <printf@plt>:
  400e30:	ff 25 e2 11 20 00    	jmp    QWORD PTR [rip+0x2011e2]        # 602018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400e36:	68 00 00 00 00       	push   0x0
  400e3b:	e9 e0 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e40 <_ZNSolsEi@plt>:
  400e40:	ff 25 da 11 20 00    	jmp    QWORD PTR [rip+0x2011da]        # 602020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400e46:	68 01 00 00 00       	push   0x1
  400e4b:	e9 d0 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e50 <puts@plt>:
  400e50:	ff 25 d2 11 20 00    	jmp    QWORD PTR [rip+0x2011d2]        # 602028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400e56:	68 02 00 00 00       	push   0x2
  400e5b:	e9 c0 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e60 <toupper@plt>:
  400e60:	ff 25 ca 11 20 00    	jmp    QWORD PTR [rip+0x2011ca]        # 602030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400e66:	68 03 00 00 00       	push   0x3
  400e6b:	e9 b0 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>:
  400e70:	ff 25 c2 11 20 00    	jmp    QWORD PTR [rip+0x2011c2]        # 602038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400e76:	68 04 00 00 00       	push   0x4
  400e7b:	e9 a0 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e80 <_ZNSt8ios_base4InitC1Ev@plt>:
  400e80:	ff 25 ba 11 20 00    	jmp    QWORD PTR [rip+0x2011ba]        # 602040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400e86:	68 05 00 00 00       	push   0x5
  400e8b:	e9 90 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400e90 <__libc_start_main@plt>:
  400e90:	ff 25 b2 11 20 00    	jmp    QWORD PTR [rip+0x2011b2]        # 602048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400e96:	68 06 00 00 00       	push   0x6
  400e9b:	e9 80 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400ea0 <__cxa_atexit@plt>:
  400ea0:	ff 25 aa 11 20 00    	jmp    QWORD PTR [rip+0x2011aa]        # 602050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400ea6:	68 07 00 00 00       	push   0x7
  400eab:	e9 70 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400eb0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
  400eb0:	ff 25 a2 11 20 00    	jmp    QWORD PTR [rip+0x2011a2]        # 602058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400eb6:	68 08 00 00 00       	push   0x8
  400ebb:	e9 60 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400ec0 <_ZNSt8ios_base4InitD1Ev@plt>:
  400ec0:	ff 25 9a 11 20 00    	jmp    QWORD PTR [rip+0x20119a]        # 602060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400ec6:	68 09 00 00 00       	push   0x9
  400ecb:	e9 50 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
  400ed0:	ff 25 92 11 20 00    	jmp    QWORD PTR [rip+0x201192]        # 602068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400ed6:	68 0a 00 00 00       	push   0xa
  400edb:	e9 40 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>:
  400ee0:	ff 25 8a 11 20 00    	jmp    QWORD PTR [rip+0x20118a]        # 602070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400ee6:	68 0b 00 00 00       	push   0xb
  400eeb:	e9 30 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400ef0 <_ZNSolsEPKv@plt>:
  400ef0:	ff 25 82 11 20 00    	jmp    QWORD PTR [rip+0x201182]        # 602078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400ef6:	68 0c 00 00 00       	push   0xc
  400efb:	e9 20 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
  400f00:	ff 25 7a 11 20 00    	jmp    QWORD PTR [rip+0x20117a]        # 602080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400f06:	68 0d 00 00 00       	push   0xd
  400f0b:	e9 10 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400f10 <_ZNSolsEm@plt>:
  400f10:	ff 25 72 11 20 00    	jmp    QWORD PTR [rip+0x201172]        # 602088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400f16:	68 0e 00 00 00       	push   0xe
  400f1b:	e9 00 ff ff ff       	jmp    400e20 <_init+0x28>

0000000000400f20 <__stack_chk_fail@plt>:
  400f20:	ff 25 6a 11 20 00    	jmp    QWORD PTR [rip+0x20116a]        # 602090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400f26:	68 0f 00 00 00       	push   0xf
  400f2b:	e9 f0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f30 <strcmp@plt>:
  400f30:	ff 25 62 11 20 00    	jmp    QWORD PTR [rip+0x201162]        # 602098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400f36:	68 10 00 00 00       	push   0x10
  400f3b:	e9 e0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f40 <tolower@plt>:
  400f40:	ff 25 5a 11 20 00    	jmp    QWORD PTR [rip+0x20115a]        # 6020a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400f46:	68 11 00 00 00       	push   0x11
  400f4b:	e9 d0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f50 <_ZNSaIcED1Ev@plt>:
  400f50:	ff 25 52 11 20 00    	jmp    QWORD PTR [rip+0x201152]        # 6020a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400f56:	68 12 00 00 00       	push   0x12
  400f5b:	e9 c0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f60 <strcpy@plt>:
  400f60:	ff 25 4a 11 20 00    	jmp    QWORD PTR [rip+0x20114a]        # 6020b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  400f66:	68 13 00 00 00       	push   0x13
  400f6b:	e9 b0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f70 <_ZNSolsEPFRSoS_E@plt>:
  400f70:	ff 25 42 11 20 00    	jmp    QWORD PTR [rip+0x201142]        # 6020b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  400f76:	68 14 00 00 00       	push   0x14
  400f7b:	e9 a0 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@plt>:
  400f80:	ff 25 3a 11 20 00    	jmp    QWORD PTR [rip+0x20113a]        # 6020c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  400f86:	68 15 00 00 00       	push   0x15
  400f8b:	e9 90 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400f90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>:
  400f90:	ff 25 32 11 20 00    	jmp    QWORD PTR [rip+0x201132]        # 6020c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  400f96:	68 16 00 00 00       	push   0x16
  400f9b:	e9 80 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  400fa0:	ff 25 2a 11 20 00    	jmp    QWORD PTR [rip+0x20112a]        # 6020d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  400fa6:	68 17 00 00 00       	push   0x17
  400fab:	e9 70 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>:
  400fb0:	ff 25 22 11 20 00    	jmp    QWORD PTR [rip+0x201122]        # 6020d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  400fb6:	68 18 00 00 00       	push   0x18
  400fbb:	e9 60 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400fc0 <_ZNSaIcEC1Ev@plt>:
  400fc0:	ff 25 1a 11 20 00    	jmp    QWORD PTR [rip+0x20111a]        # 6020e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  400fc6:	68 19 00 00 00       	push   0x19
  400fcb:	e9 50 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400fd0 <__gxx_personality_v0@plt>:
  400fd0:	ff 25 12 11 20 00    	jmp    QWORD PTR [rip+0x201112]        # 6020e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  400fd6:	68 1a 00 00 00       	push   0x1a
  400fdb:	e9 40 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400fe0 <_Unwind_Resume@plt>:
  400fe0:	ff 25 0a 11 20 00    	jmp    QWORD PTR [rip+0x20110a]        # 6020f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  400fe6:	68 1b 00 00 00       	push   0x1b
  400feb:	e9 30 fe ff ff       	jmp    400e20 <_init+0x28>

0000000000400ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt>:
  400ff0:	ff 25 02 11 20 00    	jmp    QWORD PTR [rip+0x201102]        # 6020f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  400ff6:	68 1c 00 00 00       	push   0x1c
  400ffb:	e9 20 fe ff ff       	jmp    400e20 <_init+0x28>

Дизассемблирование раздела .plt.got:

0000000000401000 <.plt.got>:
  401000:	ff 25 f2 0f 20 00    	jmp    QWORD PTR [rip+0x200ff2]        # 601ff8 <_DYNAMIC+0x1f0>
  401006:	66 90                	xchg   ax,ax

Дизассемблирование раздела .text:

0000000000401010 <_start>:
  401010:	31 ed                	xor    ebp,ebp
  401012:	49 89 d1             	mov    r9,rdx
  401015:	5e                   	pop    rsi
  401016:	48 89 e2             	mov    rdx,rsp
  401019:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40101d:	50                   	push   rax
  40101e:	54                   	push   rsp
  40101f:	49 c7 c0 30 17 40 00 	mov    r8,0x401730
  401026:	48 c7 c1 c0 16 40 00 	mov    rcx,0x4016c0
  40102d:	48 c7 c7 df 15 40 00 	mov    rdi,0x4015df
  401034:	e8 57 fe ff ff       	call   400e90 <__libc_start_main@plt>
  401039:	f4                   	hlt    
  40103a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000401040 <deregister_tm_clones>:
  401040:	b8 17 21 60 00       	mov    eax,0x602117
  401045:	55                   	push   rbp
  401046:	48 2d 10 21 60 00    	sub    rax,0x602110
  40104c:	48 83 f8 0e          	cmp    rax,0xe
  401050:	48 89 e5             	mov    rbp,rsp
  401053:	76 1b                	jbe    401070 <deregister_tm_clones+0x30>
  401055:	b8 00 00 00 00       	mov    eax,0x0
  40105a:	48 85 c0             	test   rax,rax
  40105d:	74 11                	je     401070 <deregister_tm_clones+0x30>
  40105f:	5d                   	pop    rbp
  401060:	bf 10 21 60 00       	mov    edi,0x602110
  401065:	ff e0                	jmp    rax
  401067:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40106e:	00 00 
  401070:	5d                   	pop    rbp
  401071:	c3                   	ret    
  401072:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  401076:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40107d:	00 00 00 

0000000000401080 <register_tm_clones>:
  401080:	be 10 21 60 00       	mov    esi,0x602110
  401085:	55                   	push   rbp
  401086:	48 81 ee 10 21 60 00 	sub    rsi,0x602110
  40108d:	48 c1 fe 03          	sar    rsi,0x3
  401091:	48 89 e5             	mov    rbp,rsp
  401094:	48 89 f0             	mov    rax,rsi
  401097:	48 c1 e8 3f          	shr    rax,0x3f
  40109b:	48 01 c6             	add    rsi,rax
  40109e:	48 d1 fe             	sar    rsi,1
  4010a1:	74 15                	je     4010b8 <register_tm_clones+0x38>
  4010a3:	b8 00 00 00 00       	mov    eax,0x0
  4010a8:	48 85 c0             	test   rax,rax
  4010ab:	74 0b                	je     4010b8 <register_tm_clones+0x38>
  4010ad:	5d                   	pop    rbp
  4010ae:	bf 10 21 60 00       	mov    edi,0x602110
  4010b3:	ff e0                	jmp    rax
  4010b5:	0f 1f 00             	nop    DWORD PTR [rax]
  4010b8:	5d                   	pop    rbp
  4010b9:	c3                   	ret    
  4010ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000004010c0 <__do_global_dtors_aux>:
  4010c0:	80 3d 69 11 20 00 00 	cmp    BYTE PTR [rip+0x201169],0x0        # 602230 <completed.7585>
  4010c7:	75 11                	jne    4010da <__do_global_dtors_aux+0x1a>
  4010c9:	55                   	push   rbp
  4010ca:	48 89 e5             	mov    rbp,rsp
  4010cd:	e8 6e ff ff ff       	call   401040 <deregister_tm_clones>
  4010d2:	5d                   	pop    rbp
  4010d3:	c6 05 56 11 20 00 01 	mov    BYTE PTR [rip+0x201156],0x1        # 602230 <completed.7585>
  4010da:	f3 c3                	repz ret 
  4010dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000004010e0 <frame_dummy>:
  4010e0:	bf 00 1e 60 00       	mov    edi,0x601e00
  4010e5:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  4010e9:	75 05                	jne    4010f0 <frame_dummy+0x10>
  4010eb:	eb 93                	jmp    401080 <register_tm_clones>
  4010ed:	0f 1f 00             	nop    DWORD PTR [rax]
  4010f0:	b8 00 00 00 00       	mov    eax,0x0
  4010f5:	48 85 c0             	test   rax,rax
  4010f8:	74 f1                	je     4010eb <frame_dummy+0xb>
  4010fa:	55                   	push   rbp
  4010fb:	48 89 e5             	mov    rbp,rsp
  4010fe:	ff d0                	call   rax
  401100:	5d                   	pop    rbp
  401101:	e9 7a ff ff ff       	jmp    401080 <register_tm_clones>

0000000000401106 <_Z19PrintNormalizedNamePKc>:
enum ErrorStatus {
  E_ToShortName, E_ToShortPass, E_BigName, E_OK
};

void PrintNormalizedName(const char *raw_name)
{
  401106:	55                   	push   rbp
  401107:	48 89 e5             	mov    rbp,rsp
  40110a:	48 83 ec 70          	sub    rsp,0x70
  40110e:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  401112:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  401119:	00 00 
  40111b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  40111f:	31 c0                	xor    eax,eax
  char name[MAX_NAME_LEN + 1];
  strcpy(name, raw_name);
  401121:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  401125:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  401129:	48 89 d6             	mov    rsi,rdx
  40112c:	48 89 c7             	mov    rdi,rax
  40112f:	e8 2c fe ff ff       	call   400f60 <strcpy@plt>

  for (size_t i = 0; name[i] != '\0'; ++i)
  401134:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  40113b:	00 
  40113c:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
  401140:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  401144:	48 01 d0             	add    rax,rdx
  401147:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  40114a:	84 c0                	test   al,al
  40114c:	74 2e                	je     40117c <_Z19PrintNormalizedNamePKc+0x76>
    name[i] = tolower(name[i]);
  40114e:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
  401152:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  401156:	48 01 d0             	add    rax,rdx
  401159:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  40115c:	0f be c0             	movsx  eax,al
  40115f:	89 c7                	mov    edi,eax
  401161:	e8 da fd ff ff       	call   400f40 <tolower@plt>
  401166:	89 c1                	mov    ecx,eax
  401168:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
  40116c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  401170:	48 01 d0             	add    rax,rdx
  401173:	88 08                	mov    BYTE PTR [rax],cl
void PrintNormalizedName(const char *raw_name)
{
  char name[MAX_NAME_LEN + 1];
  strcpy(name, raw_name);

  for (size_t i = 0; name[i] != '\0'; ++i)
  401175:	48 83 45 a8 01       	add    QWORD PTR [rbp-0x58],0x1
  40117a:	eb c0                	jmp    40113c <_Z19PrintNormalizedNamePKc+0x36>
    name[i] = tolower(name[i]);
  name[0] = toupper(name[0]);
  40117c:	0f b6 45 b0          	movzx  eax,BYTE PTR [rbp-0x50]
  401180:	0f be c0             	movsx  eax,al
  401183:	89 c7                	mov    edi,eax
  401185:	e8 d6 fc ff ff       	call   400e60 <toupper@plt>
  40118a:	88 45 b0             	mov    BYTE PTR [rbp-0x50],al

  printf(name);
  40118d:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  401191:	48 89 c7             	mov    rdi,rax
  401194:	b8 00 00 00 00       	mov    eax,0x0
  401199:	e8 92 fc ff ff       	call   400e30 <printf@plt>
}
  40119e:	90                   	nop
  40119f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  4011a3:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  4011aa:	00 00 
  4011ac:	74 05                	je     4011b3 <_Z19PrintNormalizedNamePKc+0xad>
  4011ae:	e8 6d fd ff ff       	call   400f20 <__stack_chk_fail@plt>
  4011b3:	c9                   	leave  
  4011b4:	c3                   	ret    

00000000004011b5 <_Z17IsCorrectPasswordPcS_PKcRb>:

ErrorStatus IsCorrectPassword(char* argv2,char* argv,
  const char *universalPassword,
  BOOL &retIsOkPass)
{
  4011b5:	55                   	push   rbp
  4011b6:	48 89 e5             	mov    rbp,rsp
  4011b9:	53                   	push   rbx
  4011ba:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
  4011c1:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
  4011c8:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
  4011cf:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
  4011d6:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
  4011dd:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4011e4:	00 00 
  4011e6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  4011ea:	31 c0                	xor    eax,eax
lable1:
  string name, password=string(argv2);
  4011ec:	48 8d 45 80          	lea    rax,[rbp-0x80]
  4011f0:	48 89 c7             	mov    rdi,rax
  4011f3:	e8 e8 fc ff ff       	call   400ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>
  4011f8:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  4011ff:	48 89 c7             	mov    rdi,rax
  401202:	e8 b9 fd ff ff       	call   400fc0 <_ZNSaIcEC1Ev@plt>
  401207:	48 8d 95 68 ff ff ff 	lea    rdx,[rbp-0x98]
  40120e:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
  401215:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  401219:	48 89 ce             	mov    rsi,rcx
  40121c:	48 89 c7             	mov    rdi,rax
  40121f:	e8 8c fd ff ff       	call   400fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
  401224:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  40122b:	48 89 c7             	mov    rdi,rax
  40122e:	e8 1d fd ff ff       	call   400f50 <_ZNSaIcED1Ev@plt>
  name = string(argv);
  401233:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  40123a:	48 89 c7             	mov    rdi,rax
  40123d:	e8 7e fd ff ff       	call   400fc0 <_ZNSaIcEC1Ev@plt>
  401242:	48 8d 95 68 ff ff ff 	lea    rdx,[rbp-0x98]
  401249:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
  401250:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  401254:	48 89 ce             	mov    rsi,rcx
  401257:	48 89 c7             	mov    rdi,rax
  40125a:	e8 51 fd ff ff       	call   400fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
  40125f:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
  401263:	48 8d 45 80          	lea    rax,[rbp-0x80]
  401267:	48 89 d6             	mov    rsi,rdx
  40126a:	48 89 c7             	mov    rdi,rax
  40126d:	e8 0e fd ff ff       	call   400f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@plt>
  401272:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  401276:	48 89 c7             	mov    rdi,rax
  401279:	e8 82 fc ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  40127e:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  401285:	48 89 c7             	mov    rdi,rax
  401288:	e8 c3 fc ff ff       	call   400f50 <_ZNSaIcED1Ev@plt>
  //printf("Name: "); cin >> name;
  //printf("Password: "); cin >> password;
  if (name.length() < 1) return E_ToShortName;
  40128d:	48 8d 45 80          	lea    rax,[rbp-0x80]
  401291:	48 89 c7             	mov    rdi,rax
  401294:	e8 d7 fb ff ff       	call   400e70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  401299:	48 85 c0             	test   rax,rax
  40129c:	0f 94 c0             	sete   al
  40129f:	84 c0                	test   al,al
  4012a1:	74 0a                	je     4012ad <_Z17IsCorrectPasswordPcS_PKcRb+0xf8>
  4012a3:	bb 00 00 00 00       	mov    ebx,0x0
  4012a8:	e9 92 02 00 00       	jmp    40153f <_Z17IsCorrectPasswordPcS_PKcRb+0x38a>
  if (name.length() > MAX_NAME_LEN) return E_BigName;
  4012ad:	48 8d 45 80          	lea    rax,[rbp-0x80]
  4012b1:	48 89 c7             	mov    rdi,rax
  4012b4:	e8 b7 fb ff ff       	call   400e70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  4012b9:	48 83 f8 3c          	cmp    rax,0x3c
  4012bd:	0f 97 c0             	seta   al
  4012c0:	84 c0                	test   al,al
  4012c2:	74 0a                	je     4012ce <_Z17IsCorrectPasswordPcS_PKcRb+0x119>
  4012c4:	bb 02 00 00 00       	mov    ebx,0x2
  4012c9:	e9 71 02 00 00       	jmp    40153f <_Z17IsCorrectPasswordPcS_PKcRb+0x38a>
  if (password.length() < 1) return E_ToShortPass;
  4012ce:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  4012d2:	48 89 c7             	mov    rdi,rax
  4012d5:	e8 96 fb ff ff       	call   400e70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  4012da:	48 85 c0             	test   rax,rax
  4012dd:	0f 94 c0             	sete   al
  4012e0:	84 c0                	test   al,al
  4012e2:	74 0a                	je     4012ee <_Z17IsCorrectPasswordPcS_PKcRb+0x139>
  4012e4:	bb 01 00 00 00       	mov    ebx,0x1
  4012e9:	e9 51 02 00 00       	jmp    40153f <_Z17IsCorrectPasswordPcS_PKcRb+0x38a>

  retIsOkPass = 
    universalPassword != NULL &&
  4012ee:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x0
  4012f5:	00 
  4012f6:	74 2c                	je     401324 <_Z17IsCorrectPasswordPcS_PKcRb+0x16f>
    strcmp(password.c_str(), universalPassword) == 0;
  4012f8:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  4012fc:	48 89 c7             	mov    rdi,rax
  4012ff:	e8 8c fc ff ff       	call   400f90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>
  401304:	48 89 c2             	mov    rdx,rax
  401307:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  40130e:	48 89 c6             	mov    rsi,rax
  401311:	48 89 d7             	mov    rdi,rdx
  401314:	e8 17 fc ff ff       	call   400f30 <strcmp@plt>
  if (name.length() < 1) return E_ToShortName;
  if (name.length() > MAX_NAME_LEN) return E_BigName;
  if (password.length() < 1) return E_ToShortPass;

  retIsOkPass = 
    universalPassword != NULL &&
  401319:	85 c0                	test   eax,eax
  40131b:	75 07                	jne    401324 <_Z17IsCorrectPasswordPcS_PKcRb+0x16f>
  40131d:	ba 01 00 00 00       	mov    edx,0x1
  401322:	eb 05                	jmp    401329 <_Z17IsCorrectPasswordPcS_PKcRb+0x174>
  401324:	ba 00 00 00 00       	mov    edx,0x0
    strcmp(password.c_str(), universalPassword) == 0;
  401329:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  401330:	88 10                	mov    BYTE PTR [rax],dl
  if (!retIsOkPass)
  401332:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  401339:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  40133c:	83 f0 01             	xor    eax,0x1
  40133f:	84 c0                	test   al,al
  401341:	74 36                	je     401379 <_Z17IsCorrectPasswordPcS_PKcRb+0x1c4>
    retIsOkPass = name[0] == password[0];
  401343:	48 8d 45 80          	lea    rax,[rbp-0x80]
  401347:	be 00 00 00 00       	mov    esi,0x0
  40134c:	48 89 c7             	mov    rdi,rax
  40134f:	e8 9c fc ff ff       	call   400ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt>
  401354:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
  401357:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  40135b:	be 00 00 00 00       	mov    esi,0x0
  401360:	48 89 c7             	mov    rdi,rax
  401363:	e8 88 fc ff ff       	call   400ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt>
  401368:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  40136b:	38 c3                	cmp    bl,al
  40136d:	0f 94 c2             	sete   dl
  401370:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  401377:	88 10                	mov    BYTE PTR [rax],dl
lable2:
  printf("Hello, ");
  401379:	bf 50 17 40 00       	mov    edi,0x401750
  40137e:	b8 00 00 00 00       	mov    eax,0x0
  401383:	e8 a8 fa ff ff       	call   400e30 <printf@plt>
  PrintNormalizedName(name.c_str());
  401388:	48 8d 45 80          	lea    rax,[rbp-0x80]
  40138c:	48 89 c7             	mov    rdi,rax
  40138f:	e8 fc fb ff ff       	call   400f90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>
  401394:	48 89 c7             	mov    rdi,rax
  401397:	e8 6a fd ff ff       	call   401106 <_Z19PrintNormalizedNamePKc>
  void *one=&&lable1;
  40139c:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x4011ec
  4013a3:	ec 11 40 00 
  void *two=&&lable2;
  4013a7:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x401379
  4013ae:	79 13 40 00 
  two-=(int&)one;
  4013b2:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  4013b9:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
  4013c0:	8b 00                	mov    eax,DWORD PTR [rax]
  4013c2:	48 98                	cdqe   
  4013c4:	48 f7 d8             	neg    rax
  4013c7:	48 01 d0             	add    rax,rdx
  4013ca:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  // int two=&&lable2;
  cout << endl;
  4013d1:	be a0 0f 40 00       	mov    esi,0x400fa0
  4013d6:	bf 20 21 60 00       	mov    edi,0x602120
  4013db:	e8 90 fb ff ff       	call   400f70 <_ZNSolsEPFRSoS_E@plt>
  cout << "float() "<< sizeof(float) <<" "<<(int&)two << " " << (&&lable2)<<endl;
  4013e0:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  4013e7:	8b 18                	mov    ebx,DWORD PTR [rax]
  4013e9:	be 58 17 40 00       	mov    esi,0x401758
  4013ee:	bf 20 21 60 00       	mov    edi,0x602120
  4013f3:	e8 d8 fa ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  4013f8:	be 04 00 00 00       	mov    esi,0x4
  4013fd:	48 89 c7             	mov    rdi,rax
  401400:	e8 0b fb ff ff       	call   400f10 <_ZNSolsEm@plt>
  401405:	be 61 17 40 00       	mov    esi,0x401761
  40140a:	48 89 c7             	mov    rdi,rax
  40140d:	e8 be fa ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  401412:	89 de                	mov    esi,ebx
  401414:	48 89 c7             	mov    rdi,rax
  401417:	e8 24 fa ff ff       	call   400e40 <_ZNSolsEi@plt>
  40141c:	be 61 17 40 00       	mov    esi,0x401761
  401421:	48 89 c7             	mov    rdi,rax
  401424:	e8 a7 fa ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  401429:	be 79 13 40 00       	mov    esi,0x401379
  40142e:	48 89 c7             	mov    rdi,rax
  401431:	e8 ba fa ff ff       	call   400ef0 <_ZNSolsEPKv@plt>
  401436:	be a0 0f 40 00       	mov    esi,0x400fa0
  40143b:	48 89 c7             	mov    rdi,rax
  40143e:	e8 2d fb ff ff       	call   400f70 <_ZNSolsEPFRSoS_E@plt>

  char *mqq=(char *)0x401784;
  401443:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x401784
  40144a:	84 17 40 00 
  	 cout << mqq << "++++++++++++++++++"<<endl;
  40144e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  401455:	48 89 c6             	mov    rsi,rax
  401458:	bf 20 21 60 00       	mov    edi,0x602120
  40145d:	e8 6e fa ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  401462:	be 63 17 40 00       	mov    esi,0x401763
  401467:	48 89 c7             	mov    rdi,rax
  40146a:	e8 61 fa ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  40146f:	be a0 0f 40 00       	mov    esi,0x400fa0
  401474:	48 89 c7             	mov    rdi,rax
  401477:	e8 f4 fa ff ff       	call   400f70 <_ZNSolsEPFRSoS_E@plt>
  	 // cout << "             " <<(int*) mqq  << endl;
  	 

  for(int i=0x450; i < (int&)two+0x410; i++){
  40147c:	c7 85 5c ff ff ff 50 	mov    DWORD PTR [rbp-0xa4],0x450
  401483:	04 00 00 
  401486:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  40148d:	8b 00                	mov    eax,DWORD PTR [rax]
  40148f:	05 10 04 00 00       	add    eax,0x410
  401494:	3b 85 5c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa4]
  40149a:	0f 8e 9a 00 00 00    	jle    40153a <_Z17IsCorrectPasswordPcS_PKcRb+0x385>
	char *u=(char *)(one+i);
  4014a0:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  4014a7:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
  4014ad:	48 98                	cdqe   
  4014af:	48 01 d0             	add    rax,rdx
  4014b2:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
	//cout << std::hex <<(((char)*u)&0xFF) << " ";
	// cout << std::hex <<(((char)*u)&0xFF) << " ";
	cout << (((char)*u)) ;
  4014b9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  4014c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  4014c3:	0f be c0             	movsx  eax,al
  4014c6:	89 c6                	mov    esi,eax
  4014c8:	bf 20 21 60 00       	mov    edi,0x602120
  4014cd:	e8 de f9 ff ff       	call   400eb0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
	if((i%20)==0){
  4014d2:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
  4014d8:	ba 67 66 66 66       	mov    edx,0x66666667
  4014dd:	89 c8                	mov    eax,ecx
  4014df:	f7 ea                	imul   edx
  4014e1:	c1 fa 03             	sar    edx,0x3
  4014e4:	89 c8                	mov    eax,ecx
  4014e6:	c1 f8 1f             	sar    eax,0x1f
  4014e9:	29 c2                	sub    edx,eax
  4014eb:	89 d0                	mov    eax,edx
  4014ed:	c1 e0 02             	shl    eax,0x2
  4014f0:	01 d0                	add    eax,edx
  4014f2:	c1 e0 02             	shl    eax,0x2
  4014f5:	29 c1                	sub    ecx,eax
  4014f7:	89 ca                	mov    edx,ecx
  4014f9:	85 d2                	test   edx,edx
  4014fb:	75 31                	jne    40152e <_Z17IsCorrectPasswordPcS_PKcRb+0x379>
		cout << "             " <<(int*) u  << endl;
  4014fd:	be 76 17 40 00       	mov    esi,0x401776
  401502:	bf 20 21 60 00       	mov    edi,0x602120
  401507:	e8 c4 f9 ff ff       	call   400ed0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  40150c:	48 89 c2             	mov    rdx,rax
  40150f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  401516:	48 89 c6             	mov    rsi,rax
  401519:	48 89 d7             	mov    rdi,rdx
  40151c:	e8 cf f9 ff ff       	call   400ef0 <_ZNSolsEPKv@plt>
  401521:	be a0 0f 40 00       	mov    esi,0x400fa0
  401526:	48 89 c7             	mov    rdi,rax
  401529:	e8 42 fa ff ff       	call   400f70 <_ZNSolsEPFRSoS_E@plt>
  char *mqq=(char *)0x401784;
  	 cout << mqq << "++++++++++++++++++"<<endl;
  	 // cout << "             " <<(int*) mqq  << endl;
  	 

  for(int i=0x450; i < (int&)two+0x410; i++){
  40152e:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
  401535:	e9 4c ff ff ff       	jmp    401486 <_Z17IsCorrectPasswordPcS_PKcRb+0x2d1>
	if((i%20)==0){
		cout << "             " <<(int*) u  << endl;
	}
  }

  return E_OK;
  40153a:	bb 03 00 00 00       	mov    ebx,0x3
ErrorStatus IsCorrectPassword(char* argv2,char* argv,
  const char *universalPassword,
  BOOL &retIsOkPass)
{
lable1:
  string name, password=string(argv2);
  40153f:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  401543:	48 89 c7             	mov    rdi,rax
  401546:	e8 b5 f9 ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  40154b:	48 8d 45 80          	lea    rax,[rbp-0x80]
  40154f:	48 89 c7             	mov    rdi,rax
  401552:	e8 a9 f9 ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  401557:	89 d8                	mov    eax,ebx
		cout << "             " <<(int*) u  << endl;
	}
  }

  return E_OK;
}
  401559:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  40155d:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  401564:	00 00 
  401566:	74 6d                	je     4015d5 <_Z17IsCorrectPasswordPcS_PKcRb+0x420>
  401568:	eb 66                	jmp    4015d0 <_Z17IsCorrectPasswordPcS_PKcRb+0x41b>
  40156a:	48 89 c3             	mov    rbx,rax
  40156d:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  401574:	48 89 c7             	mov    rdi,rax
  401577:	e8 d4 f9 ff ff       	call   400f50 <_ZNSaIcED1Ev@plt>
  40157c:	eb 39                	jmp    4015b7 <_Z17IsCorrectPasswordPcS_PKcRb+0x402>
  40157e:	48 89 c3             	mov    rbx,rax
  const char *universalPassword,
  BOOL &retIsOkPass)
{
lable1:
  string name, password=string(argv2);
  name = string(argv);
  401581:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  401585:	48 89 c7             	mov    rdi,rax
  401588:	e8 73 f9 ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  40158d:	eb 03                	jmp    401592 <_Z17IsCorrectPasswordPcS_PKcRb+0x3dd>
  40158f:	48 89 c3             	mov    rbx,rax
  401592:	48 8d 85 68 ff ff ff 	lea    rax,[rbp-0x98]
  401599:	48 89 c7             	mov    rdi,rax
  40159c:	e8 af f9 ff ff       	call   400f50 <_ZNSaIcED1Ev@plt>
  4015a1:	eb 03                	jmp    4015a6 <_Z17IsCorrectPasswordPcS_PKcRb+0x3f1>
  4015a3:	48 89 c3             	mov    rbx,rax
ErrorStatus IsCorrectPassword(char* argv2,char* argv,
  const char *universalPassword,
  BOOL &retIsOkPass)
{
lable1:
  string name, password=string(argv2);
  4015a6:	48 8d 45 a0          	lea    rax,[rbp-0x60]
  4015aa:	48 89 c7             	mov    rdi,rax
  4015ad:	e8 4e f9 ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  4015b2:	eb 03                	jmp    4015b7 <_Z17IsCorrectPasswordPcS_PKcRb+0x402>
  4015b4:	48 89 c3             	mov    rbx,rax
  4015b7:	48 8d 45 80          	lea    rax,[rbp-0x80]
  4015bb:	48 89 c7             	mov    rdi,rax
  4015be:	e8 3d f9 ff ff       	call   400f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  4015c3:	48 89 d8             	mov    rax,rbx
  4015c6:	eb 00                	jmp    4015c8 <_Z17IsCorrectPasswordPcS_PKcRb+0x413>
  4015c8:	48 89 c7             	mov    rdi,rax
  4015cb:	e8 10 fa ff ff       	call   400fe0 <_Unwind_Resume@plt>
		cout << "             " <<(int*) u  << endl;
	}
  }

  return E_OK;
}
  4015d0:	e8 4b f9 ff ff       	call   400f20 <__stack_chk_fail@plt>
  4015d5:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
  4015dc:	5b                   	pop    rbx
  4015dd:	5d                   	pop    rbp
  4015de:	c3                   	ret    

00000000004015df <main>:


int main(int argc, char* argv[]){
  4015df:	55                   	push   rbp
  4015e0:	48 89 e5             	mov    rbp,rsp
  4015e3:	48 83 ec 20          	sub    rsp,0x20
  4015e7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  4015ea:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  4015ee:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  4015f5:	00 00 
  4015f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  4015fb:	31 c0                	xor    eax,eax

	// _set_printf_count_output(1);
	bool isOkPassword=false;
  4015fd:	c6 45 f3 00          	mov    BYTE PTR [rbp-0xd],0x0
	ErrorStatus status = IsCorrectPassword(argv[1],argv[2],"secretpassword",isOkPassword);
  401601:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  401605:	48 83 c0 10          	add    rax,0x10
  401609:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  40160c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  401610:	48 83 c0 08          	add    rax,0x8
  401614:	48 8b 00             	mov    rax,QWORD PTR [rax]
  401617:	48 8d 55 f3          	lea    rdx,[rbp-0xd]
  40161b:	48 89 d1             	mov    rcx,rdx
  40161e:	ba 84 17 40 00       	mov    edx,0x401784
  401623:	48 89 c7             	mov    rdi,rax
  401626:	e8 8a fb ff ff       	call   4011b5 <_Z17IsCorrectPasswordPcS_PKcRb>
  40162b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax


	if (status == E_OK && isOkPassword)
  40162e:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  401632:	75 14                	jne    401648 <main+0x69>
  401634:	0f b6 45 f3          	movzx  eax,BYTE PTR [rbp-0xd]
  401638:	84 c0                	test   al,al
  40163a:	74 0c                	je     401648 <main+0x69>
		printf("\nPassword: OK\n");
  40163c:	bf 93 17 40 00       	mov    edi,0x401793
  401641:	e8 0a f8 ff ff       	call   400e50 <puts@plt>
  401646:	eb 0a                	jmp    401652 <main+0x73>
	else
		printf("\nPassword: ERROR\n");
  401648:	bf a1 17 40 00       	mov    edi,0x4017a1
  40164d:	e8 fe f7 ff ff       	call   400e50 <puts@plt>
	// strcpy( hello, argv[2] );

	// cout << "Введите число: ";
	// cin >> hello;
	// cout << hello <<endl;
 	return 0;
  401652:	b8 00 00 00 00       	mov    eax,0x0
}
  401657:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  40165b:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  401662:	00 00 
  401664:	74 05                	je     40166b <main+0x8c>
  401666:	e8 b5 f8 ff ff       	call   400f20 <__stack_chk_fail@plt>
  40166b:	c9                   	leave  
  40166c:	c3                   	ret    

000000000040166d <_Z41__static_initialization_and_destruction_0ii>:
  40166d:	55                   	push   rbp
  40166e:	48 89 e5             	mov    rbp,rsp
  401671:	48 83 ec 10          	sub    rsp,0x10
  401675:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  401678:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  40167b:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
  40167f:	75 27                	jne    4016a8 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  401681:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
  401688:	75 1e                	jne    4016a8 <_Z41__static_initialization_and_destruction_0ii+0x3b>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  40168a:	bf 31 22 60 00       	mov    edi,0x602231
  40168f:	e8 ec f7 ff ff       	call   400e80 <_ZNSt8ios_base4InitC1Ev@plt>
  401694:	ba 08 21 60 00       	mov    edx,0x602108
  401699:	be 31 22 60 00       	mov    esi,0x602231
  40169e:	bf c0 0e 40 00       	mov    edi,0x400ec0
  4016a3:	e8 f8 f7 ff ff       	call   400ea0 <__cxa_atexit@plt>
  4016a8:	90                   	nop
  4016a9:	c9                   	leave  
  4016aa:	c3                   	ret    

00000000004016ab <_GLOBAL__sub_I__Z19PrintNormalizedNamePKc>:
  4016ab:	55                   	push   rbp
  4016ac:	48 89 e5             	mov    rbp,rsp
  4016af:	be ff ff 00 00       	mov    esi,0xffff
  4016b4:	bf 01 00 00 00       	mov    edi,0x1
  4016b9:	e8 af ff ff ff       	call   40166d <_Z41__static_initialization_and_destruction_0ii>
  4016be:	5d                   	pop    rbp
  4016bf:	c3                   	ret    

00000000004016c0 <__libc_csu_init>:
  4016c0:	41 57                	push   r15
  4016c2:	41 56                	push   r14
  4016c4:	41 89 ff             	mov    r15d,edi
  4016c7:	41 55                	push   r13
  4016c9:	41 54                	push   r12
  4016cb:	4c 8d 25 16 07 20 00 	lea    r12,[rip+0x200716]        # 601de8 <__frame_dummy_init_array_entry>
  4016d2:	55                   	push   rbp
  4016d3:	48 8d 2d 1e 07 20 00 	lea    rbp,[rip+0x20071e]        # 601df8 <__init_array_end>
  4016da:	53                   	push   rbx
  4016db:	49 89 f6             	mov    r14,rsi
  4016de:	49 89 d5             	mov    r13,rdx
  4016e1:	4c 29 e5             	sub    rbp,r12
  4016e4:	48 83 ec 08          	sub    rsp,0x8
  4016e8:	48 c1 fd 03          	sar    rbp,0x3
  4016ec:	e8 07 f7 ff ff       	call   400df8 <_init>
  4016f1:	48 85 ed             	test   rbp,rbp
  4016f4:	74 20                	je     401716 <__libc_csu_init+0x56>
  4016f6:	31 db                	xor    ebx,ebx
  4016f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4016ff:	00 
  401700:	4c 89 ea             	mov    rdx,r13
  401703:	4c 89 f6             	mov    rsi,r14
  401706:	44 89 ff             	mov    edi,r15d
  401709:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  40170d:	48 83 c3 01          	add    rbx,0x1
  401711:	48 39 eb             	cmp    rbx,rbp
  401714:	75 ea                	jne    401700 <__libc_csu_init+0x40>
  401716:	48 83 c4 08          	add    rsp,0x8
  40171a:	5b                   	pop    rbx
  40171b:	5d                   	pop    rbp
  40171c:	41 5c                	pop    r12
  40171e:	41 5d                	pop    r13
  401720:	41 5e                	pop    r14
  401722:	41 5f                	pop    r15
  401724:	c3                   	ret    
  401725:	90                   	nop
  401726:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40172d:	00 00 00 

0000000000401730 <__libc_csu_fini>:
  401730:	f3 c3                	repz ret 

Дизассемблирование раздела .fini:

0000000000401734 <_fini>:
  401734:	48 83 ec 08          	sub    rsp,0x8
  401738:	48 83 c4 08          	add    rsp,0x8
  40173c:	c3                   	ret    
